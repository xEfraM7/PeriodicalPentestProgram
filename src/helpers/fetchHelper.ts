interface ApiResponse<T> {
  response: T | null;
  headers: Headers | null;
  status: number;
}

export const fetchHelper = async <T>(
  method: FetchMethod,
  link: string,
  headers: {
    "Content-type": string;
  },
  body: unknown | null = null,
  signal: AbortSignal | null = null
): Promise<ApiResponse<T>> => {
  const configurationObject: configurationObject = {
    method,
    headers,
  };
  if (body !== null) {
    configurationObject.body = JSON.stringify(body);
  }
  if (signal !== null) {
    configurationObject.signal = signal;
  }

  try {
    const data = await fetch(link, configurationObject);
    if (data.status === 204) {
      // No hay cuerpo de respuesta
      return { response: null, headers: data.headers, status: data.status };
    }

    // Para respuestas binarias (PDF)
    const contentType = data.headers.get("Content-Type");
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    let response: any;

    if (contentType && contentType.includes("application/pdf")) {
      response = await data.blob(); // Procesar respuesta como Blob
    } else {
      response = await data.json(); // En otros casos, tratamos como JSON
    }

    return { response, headers: data.headers, status: data.status };
  } catch {
    return { response: null, headers: null, status: 500 };
  }
};

export enum FetchMethod {
  POST = "POST",
  GET = "GET",
  PUT = "PUT",
  PATCH = "PATCH",
  DELETE = "DELETE",
}
export interface configurationObject {
  method: FetchMethod;
  headers: {
    "Content-type": string;
  };
  signal?: AbortSignal;
  body?: string;
}
