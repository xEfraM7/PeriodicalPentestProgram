import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import {
  createBrowserRouter,
  RouterProvider,
} from "react-router-dom";
import App from './App.tsx'
import ErrorPage from './components/ErrorPage.tsx';
import { HelpSectionComponent, OverviewComponent, ReportsComponent, ScansResultsComponent, VulnerabilityDetailsComponent } from './components/SideBardComponents/index.ts';
import { CloudCustodianComponent, DefectDojoComponent, HydraComponent, MetaSploitComponent, NessusComponent } from './components/SideBardComponents/ToolsSection/index.ts';

const router = createBrowserRouter([
  {
    path: "/",
    element: <App/>,
    errorElement: <ErrorPage />,
    children:[
      // Sections
      {
        path: "reports",
        element: <ReportsComponent/>,
        errorElement: <ErrorPage />,
      },
      {
        path: "overview",
        element: <OverviewComponent/>,
        errorElement: <ErrorPage />,
      },
      {
        path: "scans-results",
        element: <ScansResultsComponent/>,
        errorElement: <ErrorPage />,
      },
      {
        path: "vulnerability-details",
        element: <VulnerabilityDetailsComponent/>,
        errorElement: <ErrorPage />,
      },
      {
        path: "help",
        element: <HelpSectionComponent/>,
        errorElement: <ErrorPage />,
      },
      // tools
      {
        path: "nessus",
        element: <NessusComponent/>,
        errorElement: <ErrorPage />,
      },
      {
        path: "hydra",
        element: <HydraComponent/>,
        errorElement: <ErrorPage />,
      },
      {
        path: "metasploit",
        element: <MetaSploitComponent/>,
        errorElement: <ErrorPage />,
      },
      {
        path: "defectdojo",
        element: <DefectDojoComponent/>,
        errorElement: <ErrorPage />,
      },
      {
        path: "cloudcustodian",
        element: <CloudCustodianComponent/>,
        errorElement: <ErrorPage />,
      },
    ]
  }
]);

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <RouterProvider router={router} />
  </StrictMode>,
)
